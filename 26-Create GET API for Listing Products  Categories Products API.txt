1. laravel -> routes\api.php -> Route::namespace('App\Http\Controllers\API')->group(function () { -->
	// Listing Products API
    Route::get('listing/{url}', 'APIController@listing');


2. laravel -> app\Http\Controllers\API\APIController.php -->
	public function listing($url)
    {
        $categoryCount = Category::Where(['url' => $url, 'status' => 1])->count();
        if ($categoryCount > 0) {
            // echo 'Category Listing Working!';

            // Get Category Details
            $categoryDetails = Category::categoryDetails($url);
            // dd($categoryDetails);
            // echo 'Category Exists'; die;
            $categoryProducts = Product::with('brand')->whereIn('category_id', $categoryDetails['catIds'])->where('status', 1);



            // Checking for Dynamic Filters
            $productFilters = ProductsFilter::productFilters();
            foreach ($productFilters as $key => $filter) {
                // if filter selected
                if (isset($filter['filter_column']) && isset($data[$filter['filter_column']]) && !empty($filter['filter_column']) && !empty($data[$filter['filter_column']])) {
                    $categoryProducts->whereIn($filter['filter_column'], $data[$filter['filter_column']]);
                }
            }



            // Check For Sort
            if (isset($_GET['sort']) && !empty($_GET['sort'])) {
                if ($_GET['sort'] == 'product_latest') {
                    $categoryProducts->orderby('products.id', 'Desc');
                } elseif ($_GET['sort'] == 'price_lowest') {
                    $categoryProducts->orderby('products.product_price', 'Asc');
                } elseif ($_GET['sort'] == 'price_highest') {
                    $categoryProducts->orderby('products.product_price', 'Desc');
                } elseif ($_GET['sort'] == 'name_a_z') {
                    $categoryProducts->orderby('products.product_name', 'Asc');
                } elseif ($_GET['sort'] == 'name_z_a') {
                    $categoryProducts->orderby('products.product_name', 'Desc');
                }
            }

            // Checking For Size
            if (isset($data['size']) && !empty($data['size'])) {
                $productIds = ProductsAttribute::select('product_id')->whereIn('size', $data['size'])->pluck('product_id')->toArray();
                $categoryProducts->whereIn('id', $productIds);
            }

            // Checking For Color
            if (isset($data['color']) && !empty($data['color'])) {
                $productIds = Product::select('id')->whereIn('product_color', $data['color'])->pluck('id')->toArray();
                $categoryProducts->whereIn('id', $productIds);
            }



            // Checking For Price
            if (isset($data['price']) && !empty($data['price'])) {
                // echo '<pre>'; print_r($data['price']); die;
                foreach ($data['price'] as $key => $price) {
                    $priceArr = explode("-", $price);
                    $productIds[] = Product::select('id')->whereBetween('product_price', [$priceArr[0], $priceArr[1]])->pluck('id')->toArray();
                }
                // echo '<pre>';print_r($productIds);die;
                $productIds = call_user_func_array('array_merge', $productIds);
                // echo '<pre>';print_r($productIds);die;
                $categoryProducts->whereIn('products.id', $productIds);
            }

            // Checking For Brand
            if (isset($data['brand']) && !empty($data['brand'])) {
                $productIds = Product::select('id')->whereIn('brand_id', $data['brand'])->pluck('id')->toArray();
                $categoryProducts->whereIn('id', $productIds);
            }

            $categoryProducts = $categoryProducts->get();

            foreach ($categoryProducts as $key => $value) {
                $getDiscountPrice = Product::getDiscountPrice($categoryProducts[$key]['id']);
                if ($getDiscountPrice > 0) {
                    $categoryProducts[$key]['final_price'] = 'TAKA ' . $getDiscountPrice;
                } else {
                    $categoryProducts[$key]['final_price'] = 'TAKA ' . $categoryProducts[$key]['product_price'];
                }
                $categoryProducts[$key]['product_image'] = url("/front/images/product_images/small/" . $categoryProducts[$key]['product_image']);
            }

            return response()->json([
                'products' => $categoryProducts,
                'status' => true,
                'message' => 'Product Fetched Sucessfully!',
            ], 200);
        } else {
            $massage = 'Category URL is Incorrect!';
            return response()->json([
                'status' => false,
                'message' => $massage,
            ], 422);
        }
    }



3. laravel -> Thunder Client API Test -> 
	GET -> 
	http://127.0.0.1:8000/api/listing/Smartphones ->

	--> Send Button Click



























